import { pgTable, uuid, varchar, timestamp, text, integer, boolean, jsonb, index, uniqueIndex } from "drizzle-orm/pg-core";
import { domains } from "./domains";

/**
 * DEPRECATED: These tables are no longer used.
 * All DNS records (SPF, DKIM, DMARC) are stored in dns_records table.
 * See docs/database-architecture.md for details.
 *
 * These exports remain for backward compatibility but tables should be dropped.
 */

/**
 * SPF records table (DEPRECATED - use dns_records instead)
 * Stores SPF configurations with flattening support
 */
export const spfRecords = pgTable("spf_records", {
  id: uuid("id").primaryKey().defaultRandom(),
  domainId: uuid("domain_id").notNull().references(() => domains.id, { onDelete: "cascade" }),

  // SPF configuration
  rawRecord: text("raw_record").notNull(), // Original SPF record
  flattenedRecord: text("flattened_record"), // Flattened SPF record (if flattening was applied)
  isFlattened: boolean("is_flattened").notNull().default(false),

  // SPF mechanics count (max 10 lookups)
  mechanismCount: integer("mechanism_count").notNull().default(0),
  includeCount: integer("include_count").notNull().default(0), // Track 'include:' mechanisms specifically
  lookupCount: integer("lookup_count").notNull().default(0), // Total DNS lookups required

  // Validation
  isValid: boolean("is_valid").notNull().default(false),
  validationErrors: jsonb("validation_errors"), // Array of validation error messages
  lastValidatedAt: timestamp("last_validated_at", { withTimezone: true }),

  // Flattening metadata
  flatteningStrategy: varchar("flattening_strategy", { length: 50 }), // 'ip_expansion', 'netblock_optimization', etc.
  expandedIps: jsonb("expanded_ips"), // Array of IP addresses from includes

  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => [
  // Critical indexes for performance
  index("idx_spf_records_domain_id").on(table.domainId),
]);

/**
 * DMARC records table (DEPRECATED - use dns_records instead)
 * Stores DMARC policies and reporting configuration
 */
export const dmarcRecords = pgTable("dmarc_records", {
  id: uuid("id").primaryKey().defaultRandom(),
  domainId: uuid("domain_id").notNull().references(() => domains.id, { onDelete: "cascade" }),

  // DMARC policy
  rawRecord: text("raw_record").notNull(), // Full DMARC TXT record
  policy: varchar("policy", { length: 20 }).notNull(), // 'none', 'quarantine', 'reject'
  subdomainPolicy: varchar("subdomain_policy", { length: 20 }), // 'none', 'quarantine', 'reject'
  percentage: integer("percentage").notNull().default(100), // p tag (0-100)

  // Alignment modes
  spfAlignment: varchar("spf_alignment", { length: 10 }).default("r"), // 'r' (relaxed) or 's' (strict)
  dkimAlignment: varchar("dkim_alignment", { length: 10 }).default("r"), // 'r' (relaxed) or 's' (strict)

  // Reporting
  aggregateReportEmail: varchar("aggregate_report_email", { length: 255 }), // rua tag
  forensicReportEmail: varchar("forensic_report_email", { length: 255 }), // ruf tag
  reportFormat: varchar("report_format", { length: 10 }).default("afrf"), // DMARC report format
  reportingInterval: integer("reporting_interval").default(86400), // ri tag in seconds

  // Validation
  isValid: boolean("is_valid").notNull().default(false),
  validationErrors: jsonb("validation_errors"), // Array of validation error messages
  lastValidatedAt: timestamp("last_validated_at", { withTimezone: true }),

  // Parsed tags
  parsedTags: jsonb("parsed_tags"), // All DMARC tags as key-value pairs

  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => [
  // Critical indexes for performance
  index("idx_dmarc_records_domain_id").on(table.domainId),
]);

/**
 * DKIM records table (DEPRECATED - use dns_records instead)
 * Stores DKIM selectors and public keys
 */
export const dkimRecords = pgTable("dkim_records", {
  id: uuid("id").primaryKey().defaultRandom(),
  domainId: uuid("domain_id").notNull().references(() => domains.id, { onDelete: "cascade" }),

  // DKIM selector and key
  selector: varchar("selector", { length: 255 }).notNull(), // e.g., 'default', 'google', 'k1'
  publicKey: text("public_key").notNull(), // The DKIM public key
  privateKey: text("private_key"), // Optional: store encrypted private key if generated by us

  // DKIM configuration
  algorithm: varchar("algorithm", { length: 20 }).notNull().default("rsa-sha256"), // 'rsa-sha256', 'ed25519-sha256'
  keyType: varchar("key_type", { length: 10 }).notNull().default("rsa"), // 'rsa', 'ed25519'
  keyLength: integer("key_length"), // Bit length of key (e.g., 2048, 4096)

  // Status
  isActive: boolean("is_active").notNull().default(true),
  lastCheckedAt: timestamp("last_checked_at", { withTimezone: true }),

  // Validation
  isValid: boolean("is_valid").notNull().default(false),
  validationErrors: jsonb("validation_errors"),

  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => [
  // Critical indexes for performance
  index("idx_dkim_records_domain_id").on(table.domainId),
  uniqueIndex("idx_dkim_records_domain_selector").on(table.domainId, table.selector),
]);
